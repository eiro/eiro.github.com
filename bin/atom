#! env perl6-m

use v6;
use XML::Writer;

# multi method to-json ( Any:U ) { 'null' } 
sub pan_html ( Str:D $file where .IO.e ) {
    my $script = 'print encode_entities $_,q(<>&)';
    my $cmd    = qq{
        pandoc -thtml5 $file |
        perl -CSD -MHTML::Entities -lne '$script'
    };
    qqx/$cmd/
}

sub atom (@entries) {
    return say @entries[0].perl;
    '<?xml version="1.0" encoding="UTF-8"?>'
    , XML::Writer.serialize :feed[
        "xml:lang" => "en-US"
        , :xmlns<http://www.w3.org/2005/Atom>
        , :link[ :rel<self>
            , :type<application/atom+xml>
            , :href<http://eiro.github.io/atom.xml> ]
        , :link[ :rel<alternate>
            , :type<text/html>
            , :href<http://eiro.github.io/news.html> ]
            , id     => 'tag:eiro.github.com,2014:blog'
            , title  => 'The Silence of Plato'
            #, updated => "@entries[0].<published>"
            #, updated => @entries[0]
        ]
}

# sub _atom (@entries) {
#     '<?xml version="1.0" encoding="UTF-8"?>'
#     , tag <feed xml:lang en-US xmlns http://www.w3.org/2005/Atom >,
#         { (tag <link rel self type application/atom+xml
#                 href http://eiro.github.io/atom.xml >)
#         , (tag <link rel alternate type text/html
#                 href http://eiro.github.io/news.html >)
#         , (as_xml
#             { id     => 'tag:eiro.github.com,2014:blog'
#             , title  => 'The Silence of Plato'
#             , updated => "@entries[0].<published>"
#             , author => {name => 'Marc Chantreux'}})
#         , ( @entries.map: {
#             (tag <entry>, {
#                 (tag <id>, {.<id>})
#                 ~(tag <title>, {.<title>})
#                 ~(tag <updated>, {.<published>})
#                 ~(tag <published>, {.<published>})
#                 ~(tag "link",
#                     %( type => 'text/html'
#                     , rel => 'alternate'
#                     , href => .<link> ))
#                 ~(tag <content type html >, { .<content>.result })
#             })
#         } ) 
#     }
# }

my %posts = dir("posts").map( -> $year {
        ( my $index = "$year/index".IO ).f or next;
        $year => $index.lines.map: {
            my %p = < created file title > Z=> .split(/<[\ \t]>+/,3);
            %p<source> = join '/', $year, %p<file>;
            %p<link>   = %p<source>.subst(/\.md$/,".html");
            %p
        }
    }); 

sub news (%posts) {
    join '', 
'---
id: tag:eiro.github.com,2014:blog
title: The silence of Plato
author: { name: Marc Chantreux }
alternates:
    http://eiro.github.io/news.html: {rel: alternate, type: text/html}
    http://eiro.github.io/atom.xml:  {rel: self, type: application/atom+xml}
...
' , %posts.pairs.sort(*.key).reverse.map( -> $year {
        "\n\n# {$year.key}\n\n"
        , $year.value.reverse.map: -> $p { "* [$p<title>]($p<link>) ($p<created>)\n" }
    })

}

multi sub MAIN ('atom') {
    say atom %posts.pairs.sort(*.key).reverse.map: -> $p {
        $p.value.map: -> %p {
            %( id => "tag:eiro.github.com,{%p<created>.subst(/T.*/,"")}:{%p<source>}"
            , published => %p<created>
            , < link created title >.map({ $_ => %p{$_} })
            # , content   => start {pan_html .<source>}
            , content   => "haha"
            )
        }
    };
}

multi sub MAIN ('news') { say news %posts }

